set serveroutput on;

CREATE OR REPLACE PROCEDURE supprimer_table(Table_name IN VARCHAR)
IS
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE ' || Table_name;
  EXECUTE IMMEDIATE 'DROP TYPE ' || Table_name || '_type';
  commit ;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('no table');
END;
/

BEGIN
supprimer_table('Genre');
supprimer_table('Oeuvre');
supprimer_table('Emprunt');
supprimer_table('Exemplaire');
supprimer_table('Author');
supprimer_table('Abonne');
supprimer_table('Abonnement');
END;

/


 


CREATE OR REPLACE TYPE Genre_type as OBJECT(
  id NUMBER(19, 0),
  nom VARCHAR2(50),

  CONSTRUCTOR FUNCTION Genre_type (id NUMBER, nom VARCHAR2) RETURN SELF AS RESULT,
  MEMBER PROCEDURE sauvegarder,
  MEMBER PROCEDURE supprimer
);
/
CREATE TABLE Genre of Genre_type;

ALTER TABLE Genre
ADD CONSTRAINT pk_genre
    PRIMARY KEY (id);


CREATE OR REPLACE TYPE BODY Genre_type AS 
  
  CONSTRUCTOR FUNCTION Genre_type (id NUMBER, nom VARCHAR2)
  RETURN SELF AS RESULT IS
  BEGIN
    SELF.id := id;
    SELF.nom := nom;
  END;

  MEMBER PROCEDURE sauvegarder IS
  BEGIN
    INSERT INTO Genre(id, nom) VALUES (SELF.id, SELF.nom);
    COMMIT;
  END sauvegarder;

  MEMBER PROCEDURE supprimer IS
  BEGIN
    DELETE FROM Genre o where o.id = SELF.id;
    COMMIT;
  END supprimer;

 
  STATIC FUNCTION getGenre(o_id NUMBER) 
  Return Genre_type IS
    genre Genre_type;
  BEGIN
    SELECT Genre_type(a.id, a.nom) into genre From Genre a where  a.id = o_id;
    
    
    return genre;
  END getGenre;

END; 

/

-- Author_type
--   sauvegarder
--   supprimer
--   getOeuvres
--   ::getAuthor(id)


CREATE OR REPLACE TYPE Author_type as OBJECT(
  id NUMBER(19, 0),
  nom VARCHAR2(50),
  CONSTRUCTOR FUNCTION Author_type (id NUMBER, nom VARCHAR2) RETURN SELF AS RESULT,
  MEMBER PROCEDURE sauvegarder,
  MEMBER PROCEDURE supprimer
);

CREATE TABLE Author of Author_type;

/

ALTER TABLE Author
ADD CONSTRAINT pk_author
    PRIMARY KEY (id);

/
CREATE OR REPLACE TYPE BODY Author_type AS 
  
  CONSTRUCTOR FUNCTION Author_type (id NUMBER, nom VARCHAR2)
  RETURN SELF AS RESULT IS
  BEGIN
    SELF.id := id ;
    SELF.nom := nom ; 
  END;

  MEMBER PROCEDURE sauvegarder IS
  BEGIN
    INSERT INTO Author(id, nom) VALUES (SELF.id, SELF.nom);
    COMMIT;
  END sauvegarder;

  MEMBER PROCEDURE supprimer IS
  BEGIN
    DELETE FROM Author auth where auth.id = SELF.id;
    COMMIT;
  END supprimer;

 
  STATIC FUNCTION getAuthor(auth_id NUMBER) 
  Return Author_type IS
    auth Author_type;
  BEGIN
    SELECT Author_type(a.id, a.nom) into auth From Author  a where  a.id = auth_id;
    
    return auth;
  END getEmprunt;

END; 
/

CREATE TABLE Abonnee(
  id NUMBER(19, 0) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nom VARCHAR2(50), 
  prenom VARCHAR2(50),
  adresse VARCHAR2(50),
  tel VARCHAR2(50),
  mail VARCHAR2(50)
)

/

-- Abonnement_type
--   sauvegarder
--   supprimer

-- id abonne_id date_abonnement date_renouvelement regler

CREATE OR REPLACE TYPE Abonnement_type as OBJECT(
  id NUMBER(19, 0),
  abonne_id NUMBER(19, 0),
  date_abonnement Date,
  date_renouvelement Date,
  regler NUMBER(1) default 0,

  CONSTRUCTOR FUNCTION Abonnement_type (id NUMBER, abonne_id NUMBER, date_abonnement Date, date_renouvelement Date, regler NUMBER) RETURN SELF AS RESULT,
  MEMBER PROCEDURE sauvegarder,
  MEMBER PROCEDURE supprimer,
  STATIC FUNCTION getAbonnement(abo_id NUMBER) RETURN Abonnement_type
);

CREATE TABLE Abonnement of Abonnement_type;


ALTER TABLE Abonnement
ADD CONSTRAINT fk_abonnements_abonne
    FOREIGN KEY (abonne_id)
    REFERENCES Abonnee(id);

 
ALTER TABLE Abonnement
ADD CONSTRAINT pk_abo
    PRIMARY KEY (id);

CREATE OR REPLACE TYPE BODY Abonnement_type AS 
  
  CONSTRUCTOR FUNCTION Emprunt_type (id NUMBER, abonnes_id NUMBER, exemplaire_id NUMBER, date_emp DATE, date_retour DATE) 
  RETURN SELF AS RESULT IS
  BEGIN
    SELF.id := id;
    SELF.abonne_id := abonne_id;
    SELF.date_abonnement := date_abonnement;
    SELF.date_renouvelement := date_renouvelement;
    SELF.regler := regler;
  END;



  MEMBER PROCEDURE sauvegarder IS
  BEGIN
    INSERT INTO Emprunt(id,abonne_id,date_abonnement,date_renouvelement,regler) 
    VALUES (SELF.id, SELF.abonne_id, SELF.date_abonnement, SELF.date_renouvelement, SELF.regler);
    COMMIT;
  END sauvegarder;

  MEMBER PROCEDURE supprimer IS
  BEGIN
    DELETE FROM Emprunt emp where emp = SELF.id;
    COMMIT;
  END supprimer;

  STATIC FUNCTION getAbonnement(abo_id NUMBER) 
  Return Emprunt_type IS
    abo Emprunt_type;
  BEGIN
    SELECT Emprunt_type(a.id, a.abonne_id, a.date_abonnement, a.date_renouvelement, a.regler) 
    into abo From Emprunt  a where  a.id = abo_id;

    return abo;
  END getAbonnement;
END; 

/

-- Emprunt_type
--   sauvegarder
--   supprimer
--   ::getEmprunt(id)


CREATE OR REPLACE TYPE Emprunt_type as OBJECT(
  id NUMBER(19, 0),
  abonnes_id NUMBER(19, 0),
  exemplaire_id NUMBER(19, 0),
  date_emp DATE,
  date_retour DATE,
  is_back NUMBER(1) default 0 , 

  CONSTRUCTOR FUNCTION Emprunt_type (id NUMBER, abonnes_id NUMBER, exemplaire_id NUMBER, date_emp DATE, date_retour DATE) RETURN SELF AS RESULT,
  MEMBER PROCEDURE sauvegarder,
  MEMBER PROCEDURE supprimer,
  STATIC FUNCTION getEmprunt(emp_id NUMBER) Return Emprunt_type
);
/

CREATE TABLE Emprunt of Emprunt_type;

/
ALTER TABLE Emprunt
ADD CONSTRAINT fk_emprunts_exemplaire
   FOREIGN KEY(exemplaire_id) REFERENCES Exemplaire(id);
/
ALTER TABLE Emprunt
ADD CONSTRAINT fk_emprunts_abonne
    FOREIGN KEY (abonnes_id)
    REFERENCES Abonnes(id);
/ 
ALTER TABLE Emprunt
ADD CONSTRAINT pk_emp
    PRIMARY KEY (id);

/
CREATE OR REPLACE TYPE BODY Emprunt_type AS 
  
  CONSTRUCTOR FUNCTION Emprunt_type (id NUMBER, abonnes_id NUMBER, exemplaire_id NUMBER, date_emp DATE, date_retour DATE) 
  RETURN SELF AS RESULT IS
  BEGIN
    SELF.id := id;
    SELF.abonnes_id := abonnes_id;
    SELF.exemplaire_id := exemplaire_id;
    SELF.date_emp := date_emp;
    SELF.date_retour := date_retour;
  END;

  MEMBER PROCEDURE sauvegarder IS
  BEGIN
    INSERT INTO Emprunt(id, abonnes_id, exemplaire_id, date_emp, date_retour) 
    VALUES (SELF.id, SELF.abonnes_id, SELF.exemplaire_id, SELF.date_emp, SELF.date_retour);
    COMMIT;
  END sauvegarder;

  MEMBER PROCEDURE supprimer IS
  BEGIN
    DELETE FROM Emprunt emp where emp = SELF.id;
    COMMIT;
  END supprimer;

  STATIC FUNCTION getEmprunt(emp_id NUMBER) 
  Return Emprunt_type IS
    emp Emprunt_type;
  BEGIN
    SELECT Emprunt_type(e.id, e.abonnes_id, e.exemplaire_id, e.date_emp, e.date_retour, e.is_back) 
    into emp From Emprunt  e where  emp.id = emp_id;
    COMMIT;
    return emp;
  END getEmprunt;
END; 

/

 


CREATE OR REPLACE TYPE Exemplaire_type as OBJECT(
  id NUMBER(19, 0),
  oeuvre_id NUMBER(19, 0),
  numero_serie VARCHAR2(50),
  CONSTRUCTOR FUNCTION Exemplaire_type (id NUMBER, oeuvre_id NUMBER, numero_serie VARCHAR2) RETURN SELF AS RESULT,
  MEMBER PROCEDURE sauvegarder,
  MEMBER PROCEDURE supprimer
);
/
CREATE TABLE Exemplaire of Exemplaire_type;

/
ALTER TABLE Exemplaire
ADD CONSTRAINT pk_exemplaire
    PRIMARY KEY (id);

/
CREATE OR REPLACE TYPE BODY Exemplaire_type AS 
  
  CONSTRUCTOR FUNCTION Exemplaire_type (id NUMBER, oeuvre_id NUMBER, numero_serie VARCHAR2)
  RETURN SELF AS RESULT IS
  BEGIN
    SELF.id := id ;
    SELF.oeuvre_id := oeuvre_id;
    SELF.numero_serie := numero_serie;
  END;

  MEMBER PROCEDURE sauvegarder IS
  BEGIN
    INSERT INTO Exemplaire(id, oeuvre_id, numero_serie) VALUES (SELF.id, SELF.oeuvre_id, SELF.numero_serie);
    COMMIT;
  END sauvegarder;

  MEMBER PROCEDURE supprimer IS
  BEGIN
    DELETE FROM Exemplaire exmp where exmp.id = SELF.id;
    COMMIT;
  END supprimer;

 
  STATIC FUNCTION getExemplaire(exmp_id NUMBER) 
  Return Exemplaire_type IS
    exmp Exemplaire_type;
  BEGIN
    SELECT Exemplaire_type(a.id, a.nom) into exmp From Exemplaire a where  a.id = exmp_id;
    COMMIT;
    return exmp;
  END getExemplaire;

END; 


-- ensuite on execute le Mediatheque

